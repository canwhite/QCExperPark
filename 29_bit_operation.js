
/* -------------------------------------------------
运算符	名称	描述
&	    AND	如果两位都是 1 则设置每位为 1
|	    OR	如果两位之一为 1 则设置每位为 1
^	    XOR	如果两位只有一位为 1 则设置每位为 1
~	    NOT	反转所有位
<<	零填充左位移	通过从右推入零向左位移，并使最左边的位脱落。
>>	有符号右位移	通过从左推入最左位的拷贝来向右位移，并使最右边的位脱落。
>>>	零填充右位移	通过从左推入零来向右位移，并使最右边的位脱落。
实例
操作	结果	等同于	  结果
5 & 1	1	0101 & 0001	0001
5 | 1	5	0101 | 0001	0101
5 ^ 1	4	0101 ^ 0001	0100
~ 5	    10	~0101	    1010
5 << 1	10	0101 << 1	1010
5 >> 1	2	0101 >> 1	0010
5 >>> 1	2	0101 >>> 1	0010 
-------------------------------------------------------*/

//eg1:平均数
let a = (5+3) >> 1
console.log(a)

let nums = [1,2,3,4];
let sums =  nums.reduce((p,c)=>p+c);

/* x & 1 产生一个值为 1 或 0 的值，
这取决于 x 的最低有效位：如果最后一位为 1，
则 x & 1 的结果为 1；否则为 0。这是一个按位与运算。 */


//eg2:求奇偶
if(sums & 1){
    console.log("结果为奇数");
}else{
    console.log("结果为偶数");
}